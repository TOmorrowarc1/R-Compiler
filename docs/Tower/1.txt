/*The intermidiate version of the Syntax, adding the OOP characteristics above 
the C-like syntax, including struct, tuple and implement. A brief intro to Pattern
has been realised.*/

ITEM Syntax
Crate →
    Item*

Item →
    VisItem

VisItem →
      | Function
      | ConstantItem
      | Struct
      | Implementation

Function →
    FunctionQualifiers fn IDENTIFIER
        ( FunctionParameters? )
        FunctionReturnType? 
        ( BlockExpression | ; )

FunctionQualifiers → const?

FunctionParameters → FunctionParam ( , FunctionParam )* ,?

FunctionParam → ( FunctionParamPattern | Type )

FunctionParamPattern → PatternNoTopAlt : Type 

FunctionReturnType → -> Type

Struct →
      StructStruct
    | TupleStruct

StructStruct →
    struct IDENTIFIER ( { StructFields? } | ; )

TupleStruct →
    struct IDENTIFIER ( TupleFields? );

StructFields → StructField ( , StructField )* ,?

StructField → IDENTIFIER : Type

TupleFields → TupleField ( , TupleField )* ,?

TupleField → Type

ConstantItem →
    const ( IDENTIFIER | _ ) : Type ( = Expression )? ;

Implementation → InherentImpl

InherentImpl →
    impl Type {
        AssociatedItem*
    }

AssociatedItem → ConstantItem | Function


STATEMENT Syntax
Statement →
      ;
    | Item
    | LetStatement
    | ExpressionStatement

LetStatement →
    let PatternNoTopAlt ( : Type )?
    (
        = Expression
    )? ;

ExpressionStatement →
      ExpressionWithoutBlock ;
    | ExpressionWithBlock ;?


EXPRESSION Syntax
Expression →
      ExpressionWithoutBlock
    | ExpressionWithBlock

ExpressionWithoutBlock →
        LiteralExpression
      | OperatorExpression
      | GroupedExpression
      | TupleExpression
      | TupleIndexingExpression
      | StructExpression
      | CallExpression
      | MethodCallExpression
      | FieldExpression
      | ContinueExpression
      | BreakExpression
      | ReturnExpression
      | UnderscoreExpression

ExpressionWithBlock →
        BlockExpression
      | ConstBlockExpression
      | LoopExpression
      | IfExpression

LiteralExpression →
      CHAR_LITERAL
    | STRING_LITERAL
    | RAW_STRING_LITERAL
    | BYTE_LITERAL
    | BYTE_STRING_LITERAL
    | RAW_BYTE_STRING_LITERAL
    | C_STRING_LITERAL
    | RAW_C_STRING_LITERAL
    | INTEGER_LITERAL
    | true
    | false

BlockExpression →
    {
        Statements?
    }

Statements →
      Statement+
    | Statement+ ExpressionWithoutBlock
    | ExpressionWithoutBlock

ConstBlockExpression → const BlockExpression

OperatorExpression →
    NegationExpression
    | ArithmeticOrLogicalExpression
    | ComparisonExpression
    | LazyBooleanExpression
    | TypeCastExpression
    | AssignmentExpression
    | CompoundAssignmentExpression

NegationExpression →
      - Expression
    | ! Expression

ArithmeticOrLogicalExpression →
      Expression + Expression
    | Expression - Expression
    | Expression * Expression
    | Expression / Expression
    | Expression % Expression
    | Expression & Expression
    | Expression | Expression
    | Expression ^ Expression
    | Expression << Expression
    | Expression >> Expression

ComparisonExpression →
      Expression == Expression
    | Expression != Expression
    | Expression > Expression
    | Expression < Expression
    | Expression >= Expression
    | Expression <= Expression

LazyBooleanExpression →
      Expression || Expression
    | Expression && Expression

TypeCastExpression → Expression as TypeNoBounds

AssignmentExpression → Expression = Expression

CompoundAssignmentExpression →
      Expression += Expression
    | Expression -= Expression
    | Expression *= Expression
    | Expression /= Expression
    | Expression %= Expression
    | Expression &= Expression
    | Expression |= Expression
    | Expression ^= Expression
    | Expression <<= Expression
    | Expression >>= Expression

GroupedExpression → ( Expression )

TupleExpression → ( TupleElements? )

TupleElements → ( Expression , )+ Expression?

TupleIndexingExpression → Expression . TUPLE_INDEX

StructExpression →
    IDENTIFIER { ( StructExprFields | StructBase )? }

StructExprFields →
    StructExprField ( , StructExprField )* ( , StructBase | ,? )

StructExprField →
        IDENTIFIER
      | ( IDENTIFIER | TUPLE_INDEX ) : Expression

StructBase → .. Expression

CallExpression → Expression ( CallParams? )

CallParams → Expression ( , Expression )* ,?

MethodCallExpression → Expression . PathExprSegment ( CallParams? )

FieldExpression → Expression . IDENTIFIER

LoopExpression →
    InfiniteLoopExpression
  | PredicateLoopExpression

InfiniteLoopExpression → loop BlockExpression

PredicateLoopExpression → while Conditions BlockExpression

BreakExpression → break Expression?

ContinueExpression → continue

IfExpression →
    if Conditions BlockExpression
    ( else ( BlockExpression | IfExpression ) )?

Conditions →
    Expressionexcept StructExpression

ReturnExpression → return Expression?

UnderscoreExpression → _


PATTERN Syntax
Pattern → |? PatternNoTopAlt ( | PatternNoTopAlt )*

PatternNoTopAlt → PatternWithoutRange

PatternWithoutRange →
      LiteralPattern
    | IdentifierPattern
    | WildcardPattern
    | RestPattern
    | StructPattern
    | TupleStructPattern
    | TuplePattern
    | GroupedPattern

LiteralPattern → -? LiteralExpression

IdentifierPattern → mut? IDENTIFIER

WildcardPattern → _

RestPattern → ..

StructPattern →
    PathInExpression {
        StructPatternElements?
    }

StructPatternElements →
      StructPatternFields ( , | , StructPatternEtCetera )?
    | StructPatternEtCetera

StructPatternFields →
    StructPatternField ( , StructPatternField )*

StructPatternField →
    TUPLE_INDEX : Pattern
    | IDENTIFIER : Pattern
    | mut? IDENTIFIER

StructPatternEtCetera → ..

TupleStructPattern → PathInExpression ( TupleStructItems? )

TupleStructItems → Pattern ( , Pattern )* ,?

TuplePattern → ( TuplePatternItems? )

TuplePatternItems →
      Pattern ,
    | RestPattern
    | Pattern ( , Pattern )+ ,?

GroupedPattern → ( Pattern )


TYPE Syntax
Type →
      TypeNoBounds

TypeNoBounds →
      ParenthesizedType
    | IDENTIFIER
    | TupleType
    | NeverType
    | InferredType

ParenthesizedType → ( Type )

NeverType → !

TupleType →
      ( )
    | ( ( Type , )+ Type? )

InferredType → _